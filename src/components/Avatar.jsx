/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/6765dd1caad57d8cead6442b.glb 
*/

import { useGLTF, useFBX, useAnimations } from '@react-three/drei'
import { useFrame } from '@react-three/fiber';
import { useControls } from 'leva';
import React, { useEffect, useRef } from 'react';
import * as THREE from "three";

export function Avatar(props) {
    const { animation } = props;
    const { headfollow, cursorfollow } = useControls({
        headfollow: false,
        cursorfollow: false,
    });
    const group = useRef();
    const { nodes, materials } = useGLTF('models/6765dd1caad57d8cead6442b.glb');

    const { animations: typingAnimation } = useFBX("animations/Typing.fbx");
    typingAnimation[0].name = "Typing";
    const { animations: standingAnimation } = useFBX("animations/Standing.fbx");
    standingAnimation[0].name = "Standing";
    const { animations: fallingAnimation } = useFBX("animations/Falling.fbx");
    fallingAnimation[0].name = "Falling";

    const mergedAnimations = [
        typingAnimation[0],
        standingAnimation[0],
        fallingAnimation[0],
    ];

    const { actions } = useAnimations(mergedAnimations, group);

    useFrame((state) => {
        if (headfollow) {
            group.current.getObjectByName("Head").lookAt(state.camera.position);
        }
        if (cursorfollow) {
            const target = new THREE.Vector3(state.mouse.x, state.mouse.y, 1);
            group.current.getObjectByName("Spine2").lookAt(target);
        }
    });

    useEffect(() => {
        actions[animation].reset().play();
        return () => {
            actions[animation].reset().stop();
        };
    }, [animation]);



    return (
        <group {...props} ref={group} dispose={null}>
            <group rotation-x={-Math.PI / 2}>
                <primitive object={nodes.Hips} />
                <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
                <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
                <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
                <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
                <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
                <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
                <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
                <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
                <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
            </group>
        </group>
    )
}

useGLTF.preload('models/6765dd1caad57d8cead6442b.glb')